//importing LightningElement from 'lwc' module
import { LightningElement, track } from 'lwc';
import addTodo from '@salesforce/apex/ToDoController.addTodo';
import getCurrentToDos from '@salesforce/apex/ToDoController.getCurrentToDos';

export default class ToDoManager extends LightningElement {

    //to declare the property inside JS file we can simply write property Name
    @track time = "8:15 PM";
    @track greeting = "Good Evening";

    //creating list to maintain todo's, initially it will be blank and we'll add the item whenever 
    //addTodoHandler() method is called
    @track todos = [];

    //calling getTime method using connectedCallBack
    //connectedCallBack is life cycle method, which is part of LWC framework 
    //and it's get called as soon as component gets initialize
    connectedCallback(){
        this.getTime();
        //this.populateTodos();
        this.fetchTodos();

        setInterval( () => {
            this.getTime();

        }, 1000*60);  //1000(miliSecond)*60 = 1minute/each minute
    };

    //instead of hardcoding time, we should get current time & greeting by using client side computation
    //Hense we will use Date JS function to get current time & greeting
    getTime(){
        const date = new Date();
        const hour = date.getHours(); //hour will be 24Hour format
        const min = date.getMinutes();

        //setting time property value to the currect time using back quote ``
        //we can write current computation within back quote `` itself
        this.time  = `${this.getHour(hour)}:${this.getDoubleDigit(min)} ${this.getMidDay(hour)}`

        //setting greeting method
        this.setGreeting(hour);
    }

    //converting hour into 12hour format
    getHour(hour){
        return hour === 0 ? 12 : hour > 12 ? (hour-12) : hour;
    }

    //to get AM/PM
    getMidDay(hour){
        return hour >= 12 ? "PM" : "AM";
    }

    //to get less than 10 dingit into double digit ex.: 09, 07, 08
    getDoubleDigit(digit){
        return digit < 10 ? "0"+digit : digit;
    }

    setGreeting(hour){
        if(hour<12){
            this.greeting = "Good Morning";
        }else if(hour>=12 && hour<17){
            this.greeting = "Good Aftrnoon";
        }else{
            this.greeting = "Good Evening";
        }
    }

    addTodoHandler(){
        //we don't have direct access to our document Obj, hence we're using <this.template>
        const inputBox = this.template.querySelector("lightning-input");
        //console.log("Current Value", inputBox.value);

        //creating JS object to push multiple item: detailed desc:Quip
        const todo ={
            //todoId: this.todos.length,
            todoName: inputBox.value,
            done: false,
            //todoDate: new Date() //todoId & todoDate will be generated by salesforce automatically
        } 

        //this.todos.push(todo); //here we are adding element into blank array

        //adding item in todos list using push() method [it will push single item]
        //this.todos.push(inputBox.value);

        //vid[1:10] for multi var : <<addTodo({payload : JSON.stringify(todo1), payload : JSON.stringify(todo2)})>>
        //here we will serialise todo(which is JS object) into string <<JSON.stringify(todo)>> and call it on apex method
        //after that this EcmaScript module return promise, we need to handle it with then and catch (which will be callback method)
        addTodo({payload : JSON.stringify(todo)}).then(response => {
            console.log('Item inserted successfully');
            this.fetchTodos();
        }).catch(error => {
            console.log('Error in inserting todo Item: '+error);
        });

        //after clicking on + button we want clear the value of inputBox so that user can add another task
        //here we are simply blanking out to clear inputbox
        inputBox.value = "";
    }

    //Get todos list using server side apex call
    fetchTodos(){
        getCurrentToDos().then(result => {
            if(result){
                console.log('Retrieved todos from server'+result.length);
                this.todos = result;
            }
        }).catch(error => {
            console.log('Error in inserting todo Item: '+error);
        });
    }

    //get property is also a reactive property(it looks similar to function) and it must return a value in the end
    get upcomingTask(){
        return this.todos && this.todos.length ? this.todos.filter(todo => !todo.done) : [];
    }

    get completedTask(){
        return this.todos && this.todos.length ? this.todos.filter(todo => todo.done) : [];
    }

    //Creating sample method to test sample todos items for our upcoming and completed task
    populateTodos(){
        const todos = [
            {
                todoId: 0,
                todoName: "Feed the dog",
                done: false,
                todoDate: new Date()
            },
            {
                todoId: 1,
                todoName: "Wash the car",
                done: false,
                todoDate: new Date()
            },
            {
                todoId: 2,
                todoName: "Send Email to Manager",
                done: true,
                todoDate: new Date()
            }
        ];

        this.todos = todos;
    }
}